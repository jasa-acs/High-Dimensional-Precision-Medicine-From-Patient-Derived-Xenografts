PDX CODE:

Each script allows for specifying two directories at the top of the file:
dir1 should be the directory where all the functions below and all 
data files are saved. dir2 should be a scratch directory where 
intermediate files can be saved. Each script also allows for 
specifying a string, tosubmit, which should contain the command 
to submit a job to a computing cluster.
Various functions require the following R packages: 
MASS, stringi, energy, CCP, stringr, caret, glmnet, randomForest;
Outcome weighted learning requires Python version 3.3.  Folder RNA_seq_only/ contains the scripts for the RNA-seq only platform analysis. 

SCRIPTS TO RUN:

pdx.run.screen.R: runs screening for all cancer types using 
pdx.bdc1.R and pdx.bdc2.R as described below

pdx.run.collate.R: collates results by calling pdx.collate.R
and creates csv files with screened gene variables

pdx.rf.lasso.script.R: script to run all standard RF and LASSO 
analyses and output estimated value functions, variable importance,
and smoothed predictive values to rda files 

pdx.ql.owl.script.R: script to run all OWL and Q-learning analyses 
and output estimated value functions to csv files

pdx.ql.owl.sl.pre.script.R: script to submit jobs for all Q-learning 
and OWL analyses as preparation for super-learning

pdx.ql.owl.sl.script.R: script to submit jobs for all super-learning training

collect.results.R: reads all value function results from csv/rda files 
and consolidates them into rda files

pdx.make.value.tables.R: reads in rda files created by collect.results.R 
and creates tables

pdx.ql.owl.final.script.R: script to run all OWL and Q-learning 
analyses and output coefficients or variable importance scores 
to csv files

collect.coefficients.R: reads in all coefficients from csv files 
and collects into lists

pdx.run.screen.overall.R: runs screening across combined cancers 
using pdx.bdc1.R and pdx.bdc2.R as described below

pdx.run.collate.overall.R: collates results of screening genes 
across combined cancesr by calling pdx.collate.R

Note: analyses for combined cancer data set in RF and LASSO are
generated by pdx.rf.lasso.script.R

pdx.ql.owl.overall.script.R: script to run analyses on combined 
cancer data set

collect.results.overall.R: reads value function results from 
combined cancer analysis from csv files and organizes into lists

pdx.make.value.tables.overall.R: reads in value functions from 
combined cancer analysis and creates tables

Example.R: an example goes through the PDX pipeline

FUNCTIONS:

Data import:

pdx.import.fn.R: function to import data and perform unsupervised screening

Screening:

pdx.bdc1.R: prognostic gene screening; input tumor type and trt type
and this function writes results of BDC/CCA to csv files

pdx.bdc2.R: predictive gene screening; input tumor type and two 
trt types and this function writes results of BDC/CCA to csv files

pdx.collate.R: collates screening results across files for each cancer 
type and writes csv files with selected gene variables

Q-learning:

pdx.ql1.R: Q-learning with pseudo-values

pdx.ql2.R: Q-learning without pseudo-values

pdx.qlrf1.R: Q-learning using random forests and pseudo-values

pdx.ql.rf2.R: Q-learning using random forests without pseudo-values

pdx.ql1.smooth.R: Q-learning (with pseudo-values) where outcomes are 
smoothed by using random-forest predicted outcomes

pdx.ql2.smooth.R: Q-learning (with pseudo-values) where outcomes are 
smoothed by using random-forest predicted outcomes

pdx.ql.rf1.smooth.R: Q-learning (with pseudo-values) and random 
forests where value is smoothed by using random-forest predicted outcomes

pdx.ql.rf2.smooth.R: Q-learning (without pseudo-values) and random 
forests where value is smoothed by using random-forest predicted outcomes
 
Outcome weighted learning:

pdx.owl.linear.R: OWL with linear decision function

pdx.owl.kernel.R: OWL with Gaussian kernel

pdx.owl.linear.smooth.R: OWL with linear decision function, smoothed using 
random forest predicted outcomes

pdx.owl.kernel.smooth.R: OWL with Gaussian kernel, smoothed using 
random forest predicted outcomes

pdx.dl.owl.linear.R: OWL with linear decision function and deep learning 
reduced data

pdx.dl.owl.kernel.R: OWL with Gaussian kernel and deep learning 
reduced data

pdx.dl.owl.linear.smooth.R: OWL with linear decision function, smoothed using 
random forest predicted outcomes and deep learning reduced data

pdx.dl.owl.kernel.smooth.R: OWL with Gaussian kernel, smoothed using 
random forest predicted outcomes and deep learning reduced data

gowl_ord33.py: python functions needed for OWL, for python version 3.3.*

gowl_ord34.py: python functions needed for OWL, for python version 3.4.* or later

owl.temp.linear.py: python script to perform linear OWL

owl.temp.kernel.py: python script to perform Gaussian OWL

owl.final.linear.py: python script to perform linear OWL and return 
estimated coefficients (for final analysis on full data)

Functions to repeat above analyses on full data (without cross-validation) 
to save coefficients and variable importance scores:

pdx.ql1.final.R

pdx.ql2.final.R

pdx.ql.rf1.final.R

pdx.ql.rf2.final.R

pdx.ql1.smooth.final.R

pdx.ql2.smooth.final.R

pdx.ql.rf1.smooth.final.R

pdx.ql.rf2.smooth.final.R

pdx.owl.linear.final.R

pdx.owl.linear.smooth.final.R

Functions to prepare for super-learning using two-step cross-validation:

pdx.ql1.sl.R

pdx.ql2.sl.R

pdx.ql.rf1.sl.R

pdx.ql.rf2.sl.R

pdx.ql1.smooth.sl.R

pdx.ql2.smooth.sl.R

pdx.ql.rf1.smooth.sl.R

pdx.ql.rf2.smooth.sl.R

Super-learning (optimize the super-learner):

pdx.super.learning.4.R: combining ql1.smooth, ql2.smooth, ql.rf1.smooth, ql.rf2.smooth

pdx.super.learning.6.R: combining ql1.smooth, ql2.smooth, ql.rf1.smooth, ql.rf2.smooth
ql.rf1, ql.rf2

pdx.super.learning.8.R: all the Q-learning based methods using the screened genomic features

pdx.super.learning.16.R: all the Q-learning based methods using 
both the screened genomic features and DAE features
